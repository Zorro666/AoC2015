using NUnit.Framework;
using System;

namespace Day10
{
    [TestFixture]
    public class Tests
    {
        [Test]
        [TestCase(new string[] { "....", "....", "...." }, 4, 3, TestName = "ParseMapDimensions(4,3)")]
        [TestCase(new string[] { "...", "...", "..." }, 3, 3, TestName = "ParseMapDimensions(3,3)")]
        [TestCase(new string[] { "..", "..", ".." }, 2, 3, TestName = "ParseMapDimensions(2,3)")]
        [TestCase(new string[] { "..", ".." }, 2, 2, TestName = "ParseMapDimensions(1,1)")]
        public void ParseMapDimensions(string[] lines, int expectedWidth, int expectedHeight)
        {
            Program.ParseMap(lines);
            Assert.That(Program.Width, Is.EqualTo(expectedWidth));
            Assert.That(Program.Height, Is.EqualTo(expectedHeight));
        }

        [Test]
        [TestCase(new string[] { "....", "....", "...." }, 0, 0, false, TestName = "ParseMapData(3x3 0,0)")]
        [TestCase(new string[] { "...", "...", "..." }, 1, 1, false, TestName = "ParseMapData(3x3 1,1)")]
        [TestCase(new string[] { "..", "..", ".." }, 1, 2, false, TestName = "ParseMapData(2x3 1,2)")]
        [TestCase(new string[] { "..", ".." }, 1, 1, false, TestName = "ParseMapData(2x2 1,1)")]
        [TestCase(new string[] { ".#..", "....", "...." }, 1, 0, true, TestName = "ParseMapData(4x3 1,0)")]
        [TestCase(new string[] { "...", "#..", "..." }, 0, 1, true, TestName = "ParseMapData(3x3 0,1)")]
        [TestCase(new string[] { "..", "..", ".#" }, 1, 2, true, TestName = "ParseMapData(3x2 1,2)")]
        [TestCase(new string[] { "..", "#." }, 0, 1, true, TestName = "ParseMapData(2x2 0,1)")]
        public void ParseMapData(string[] lines, int x, int y, bool expected)
        {
            Program.ParseMap(lines);
            Assert.That(Program.Map(x, y), Is.EqualTo(expected));
        }

        [Test]
        [TestCase(new string[] { "....", "....", "...." }, 0, TestName = "AsteroidsCounts(4x3 0)")]
        [TestCase(new string[] { "...", "...", "..." }, 0, TestName = "AsteroidsCounts(3x3 0)")]
        [TestCase(new string[] { "..", "..", ".." }, 0, TestName = "AsteroidsCounts(2x3 0)")]
        [TestCase(new string[] { "..", ".." }, 0, TestName = "AsteroidsCounts(2x2 0)")]
        [TestCase(new string[] { ".#..", "..#.", ".#.." }, 3, TestName = "AsteroidsCounts(4x3 3)")]
        [TestCase(new string[] { "...", "#..", ".#." }, 2, TestName = "AsteroidsCounts(3x3 2)")]
        [TestCase(new string[] { "..", "..", ".#" }, 1, TestName = "AsteroidsCounts(2x3 01")]
        [TestCase(new string[] { "..", "#." }, 1, TestName = "AsteroidsCounts(2x2 1)")]
        public void AsteroidsCounts(string[] lines, int expected)
        {
            Program.ParseMap(lines);
            Assert.That(Program.AsteroidsCount, Is.EqualTo(expected));
        }

        /*

The best location for a new monitoring station on this map is the highlighted asteroid at 3,4 because it can detect 8 asteroids, more than any other location. (The only asteroid it cannot detect is the one at 1,0; its view of this asteroid is blocked by the asteroid at 2,2.) All other asteroids are worse locations; they can detect 7 or fewer other asteroids. Here is the number of other asteroids a monitoring station on each asteroid could detect:

        .7..7
        .....
        67775
        ....7
        ...87
        */
        [Test]
        [TestCase(new string[] { ".#..#", ".....", "#####", "....#", "...##" }, 0, 0, 0, TestName = "CountVisible(0,0)")]
        [TestCase(new string[] { ".#..#", ".....", "#####", "....#", "...##" }, 1, 0, 7, TestName = "CountVisible(1,0)")]
        [TestCase(new string[] { ".#..#", ".....", "#####", "....#", "...##" }, 4, 0, 7, TestName = "CountVisible(4,0)")]
        [TestCase(new string[] { ".#..#", ".....", "#####", "....#", "...##" }, 0, 2, 6, TestName = "CountVisible(0,2)")]
        [TestCase(new string[] { ".#..#", ".....", "#####", "....#", "...##" }, 1, 2, 7, TestName = "CountVisible(1,2)")]
        [TestCase(new string[] { ".#..#", ".....", "#####", "....#", "...##" }, 2, 2, 7, TestName = "CountVisible(2,2)")]
        [TestCase(new string[] { ".#..#", ".....", "#####", "....#", "...##" }, 3, 2, 7, TestName = "CountVisible(3,2)")]
        [TestCase(new string[] { ".#..#", ".....", "#####", "....#", "...##" }, 4, 2, 5, TestName = "CountVisible(4,2)")]
        [TestCase(new string[] { ".#..#", ".....", "#####", "....#", "...##" }, 4, 3, 7, TestName = "CountVisible(4,3)")]
        [TestCase(new string[] { ".#..#", ".....", "#####", "....#", "...##" }, 3, 4, 8, TestName = "CountVisible(3,4)")]
        [TestCase(new string[] { ".#..#", ".....", "#####", "....#", "...##" }, 4, 4, 7, TestName = "CountVisible(4,4)")]
        /*
		Best is 5,8 with 33 other asteroids detected:
		......#.#.
		#..#.#....
		..#######.
		.#.#.###..
		.#..#.....
		..#....#.#
		#..#....#.
		.##.#..###
		##...#..#.
		.#....####
		*/
        [TestCase(new string[] { "......#.#.", "#..#.#....", "..#######.", ".#.#.###..", ".#..#.....", "..#....#.#", "#..#....#.", ".##.#..###", "##...#..#.", ".#....####" }, 5, 8, 33, TestName = "CountVisible(33)")]
        /*
		Best is 1,2 with 35 other asteroids detected:
		#.#...#.#.
		.###....#.
		.#....#...
		##.#.#.#.#
		....#.#.#.
		.##..###.#
		..#...##..
		..##....##
		......#...
		.####.###.
		*/
        [TestCase(new string[] { "#.#...#.#.", ".###....#.", ".#....#...", "##.#.#.#.#", "....#.#.#.", ".##..###.#", "..#...##..", "..##....##", "......#...", ".####.###." }, 1, 2, 35, TestName = "CountVisible(35)")]
        /*
		Best is 6,3 with 41 other asteroids detected:
		.#..#..###
		####.###.#
		....###.#.
		..###.##.#
		##.##.#.#.
		....###..#
		..#.#..#.#
		#..#.#.###
		.##...##.#
		.....#.#..
		*/
        [TestCase(new string[] { ".#..#..###", "####.###.#", "....###.#.", "..###.##.#", "##.##.#.#.", "....###..#", "..#.#..#.#", "#..#.#.###", ".##...##.#", ".....#.#.." }, 6, 3, 41, TestName = "CountVisible(41)")]
        /*
        Best is 11,13 with 210 other asteroids detected:
        .#..##.###...#######
        ##.############..##.
        .#.######.########.#
        .###.#######.####.#.
        #####.##.#.##.###.##
        ..#####..#.#########
        ####################
        #.####....###.#.#.##
        ##.#################
        #####.##.###..####..
        ..######..##.#######
        ####.##.####...##..#
        .#####..#.######.###
        ##...#.##########...
        #.##########.#######
        .####.#.###.###.#.##
        ....##.##.###..#####
        .#.#.###########.###
        #.#.#.#####.####.###
        ###.##.####.##.#..##
        */
        [TestCase(new string[] { ".#..##.###...#######", "##.############..##.", ".#.######.########.#", ".###.#######.####.#.", "#####.##.#.##.###.##", "..#####..#.#########", "####################", "#.####....###.#.#.##", "##.#################", "#####.##.###..####..", "..######..##.#######", "####.##.####...##..#", ".#####..#.######.###", "##...#.##########...", "#.##########.#######", ".####.#.###.###.#.##", "....##.##.###..#####", ".#.#.###########.###", "#.#.#.#####.####.###", "###.##.####.##.#..##" }, 11, 13, 210, TestName = "CountVisible(210)")]
        public void CountVisible(string[] lines, int x, int y, int expected)
        {
            Program.ParseMap(lines);
            Assert.That(Program.CountVisible(x, y), Is.EqualTo(expected));
        }

        /*

Here is an asteroid (#) and some examples of the ways its line of sight might be blocked. If there were another asteroid at the location of a capital letter, the locations marked with the corresponding lowercase letter would be blocked and could not be detected:

		#.........
		...A......
		...B..a...
		.EDCG....a
		..F.c.b...
		.....c....
		..efd.c.gb
		.......c..
		....f...c.
		...e..d..c
		*/
        [Test]
        // Visibility for A
        [TestCase(new string[] { "#.........", "...#......", "......#...", ".........#" }, 3, 0, true, TestName = "IsVisibleFrom(A 3,0)")]
        [TestCase(new string[] { "#.........", "...#......", "......#...", ".........#" }, 3, 1, true, TestName = "IsVisibleFrom(A 3,1)")]
        [TestCase(new string[] { "#.........", "...#......", "......#...", ".........#" }, 3, 2, true, TestName = "IsVisibleFrom(A 3,2)")]
        [TestCase(new string[] { "#.........", "...#......", "......#...", ".........#" }, 6, 0, true, TestName = "IsVisibleFrom(A 6,0)")]
        [TestCase(new string[] { "#.........", "...#......", "......#...", ".........#" }, 6, 1, true, TestName = "IsVisibleFrom(A 6,1)")]
        [TestCase(new string[] { "#.........", "...#......", "......#...", ".........#" }, 6, 2, false, TestName = "IsVisibleFrom(A 6,2)")]
        [TestCase(new string[] { "#.........", "...#......", "......#...", ".........#" }, 9, 3, false, TestName = "IsVisibleFrom(A 9,3)")]
        [TestCase(new string[] { "#.........", "...#......", "..........", ".........#" }, 6, 3, true, TestName = "IsVisibleFrom(A 6,3)")]
        // Visibility for B
        [TestCase(new string[] { "#.........", "..........", "...#......", "..........", "......#..." }, 3, 0, true, TestName = "IsVisibleFrom(B 3,0)")]
        [TestCase(new string[] { "#.........", "..........", "...#......", "..........", "......#..." }, 3, 1, true, TestName = "IsVisibleFrom(B 3,1)")]
        [TestCase(new string[] { "#.........", "..........", "...#......", "..........", "......#..." }, 3, 2, true, TestName = "IsVisibleFrom(B 3,2)")]
        [TestCase(new string[] { "#.........", "..........", "...#......", "..........", "......#..." }, 3, 3, true, TestName = "IsVisibleFrom(B 3,3)")]
        [TestCase(new string[] { "#.........", "..........", "...#......", "..........", "......#..." }, 6, 0, true, TestName = "IsVisibleFrom(B 6,0)")]
        [TestCase(new string[] { "#.........", "..........", "...#......", "..........", "......#..." }, 6, 1, true, TestName = "IsVisibleFrom(B 6,1)")]
        [TestCase(new string[] { "#.........", "..........", "...#......", "..........", "......#..." }, 6, 2, true, TestName = "IsVisibleFrom(B 6,2)")]
        [TestCase(new string[] { "#.........", "..........", "...#......", "..........", "......#..." }, 6, 3, true, TestName = "IsVisibleFrom(B 6,3)")]
        [TestCase(new string[] { "#.........", "..........", "...#......", "..........", "......#..." }, 6, 4, false, TestName = "IsVisibleFrom(B 6,4)")]
        [TestCase(new string[] { "#.........", "..........", "...#......", "..........", "......#..." }, 6, 5, true, TestName = "IsVisibleFrom(B 6,5)")]
        [TestCase(new string[] { "#.........", "..........", "...#......", "..........", "..........", "..........", ".........#" }, 9, 6, false, TestName = "IsVisibleFrom(B 9,6)")]
        // Visibility for C
        [TestCase(new string[] { "#.........", "..........", "..........", "...#......", "....#....." }, 4, 4, false, TestName = "IsVisibleFrom(C 4,4)")]
        [TestCase(new string[] { "#.........", "..........", "..........", "...#......", "..........", ".....#...." }, 5, 5, false, TestName = "IsVisibleFrom(C 5,5)")]
        [TestCase(new string[] { "#.........", "..........", "..........", "...#......", "..........", "..........", "......#..." }, 6, 6, false, TestName = "IsVisibleFrom(C 6,6)")]
        [TestCase(new string[] { "#.........", "..........", "..........", "...#......", "..........", "..........", "..........", ".......#.." }, 7, 7, false, TestName = "IsVisibleFrom(C 7,7)")]
        [TestCase(new string[] { "#.........", "..........", "..........", "...#......", "..........", "..........", "..........", "..........", "........#." }, 8, 8, false, TestName = "IsVisibleFrom(C 8,8)")]
        [TestCase(new string[] { "#.........", "..........", "..........", "...#......", "..........", "..........", "..........", "..........", "..........", ".........#" }, 9, 9, false, TestName = "IsVisibleFrom(C 9,9)")]
        // Visibility for D
        [TestCase(new string[] { "#.........", "..........", "..........", "..#.......", "..........", "..........", "....#....." }, 4, 6, false, TestName = "IsVisibleFrom(D 4,6)")]
        [TestCase(new string[] { "#.........", "..........", "..........", "..#.......", "..........", "..........", "..........", "..........", "..........", "......#..." }, 6, 9, false, TestName = "IsVisibleFrom(D 6,9)")]
        // Visibility for E
        [TestCase(new string[] { "#.........", "..........", "..........", ".#........", "..........", "..........", "..#.......", "..........", "..........", "......#..." }, 2, 6, false, TestName = "IsVisibleFrom(E 2,6)")]
        [TestCase(new string[] { "#.........", "..........", "..........", ".#........", "..........", "..........", "..........", "..........", "..........", "...#......" }, 3, 9, false, TestName = "IsVisibleFrom(E 3,9)")]
        // Visibility for F
        [TestCase(new string[] { "#.........", "..........", "..........", "..........", "..#.......", "..........", "...#......", "..........", "..........", "......#..." }, 3, 6, false, TestName = "IsVisibleFrom(F 3,6)")]
        [TestCase(new string[] { "#.........", "..........", "..........", "..........", "..#.......", "..........", "..........", "..........", "....#.....", ".........." }, 4, 8, false, TestName = "IsVisibleFrom(F 4,8)")]
        // Visibility for G
        [TestCase(new string[] { "#.........", "..........", "..........", "....#.....", "..........", "..........", "........#.", "..........", "....#.....", ".........." }, 8, 6, false, TestName = "IsVisibleFrom(G 8,6)")]
        public void IsVisibleFrom(string[] lines, int toX, int toY, bool expected)
        {
            Program.ParseMap(lines);
            var sa = Program.SortAsteroidsFromPoint(0, 0);
            Assert.That(Program.IsVisibleFrom(sa, 0, 0, toX, toY), Is.EqualTo(expected));
        }

        [Test]
        /*
		Best is 5,8 with 33 other asteroids detected:
		......#.#.
		#..#.#....
		..#######.
		.#.#.###..
		.#..#.....
		..#....#.#
		#..#....#.
		.##.#..###
		##...#..#.
		.#....####
		*/
        [TestCase(new string[] { "......#.#.", "#..#.#....", "..#######.", ".#.#.###..", ".#..#.....", "..#....#.#", "#..#....#.", ".##.#..###", "##...#..#.", ".#....####" }, 5, 8, TestName = "ComputeBestAsteroid(A 5,8)")]
        /*
		Best is 1,2 with 35 other asteroids detected:
		#.#...#.#.
		.###....#.
		.#....#...
		##.#.#.#.#
		....#.#.#.
		.##..###.#
		..#...##..
		..##....##
		......#...
		.####.###.
		*/
        [TestCase(new string[] { "#.#...#.#.", ".###....#.", ".#....#...", "##.#.#.#.#", "....#.#.#.", ".##..###.#", "..#...##..", "..##....##", "......#...", ".####.###." }, 1, 2, TestName = "ComputeBestAsteroid(B 1,2)")]
        /*
		Best is 6,3 with 41 other asteroids detected:
		.#..#..###
		####.###.#
		....###.#.
		..###.##.#
		##.##.#.#.
		....###..#
		..#.#..#.#
		#..#.#.###
		.##...##.#
		.....#.#..
		*/
        [TestCase(new string[] { ".#..#..###", "####.###.#", "....###.#.", "..###.##.#", "##.##.#.#.", "....###..#", "..#.#..#.#", "#..#.#.###", ".##...##.#", ".....#.#.." }, 6, 3, TestName = "ComputeBestAsteroid(C 6,3)")]
        /*
        Best is 11,13 with 210 other asteroids detected:
        .#..##.###...#######
        ##.############..##.
        .#.######.########.#
        .###.#######.####.#.
        #####.##.#.##.###.##
        ..#####..#.#########
        ####################
        #.####....###.#.#.##
        ##.#################
        #####.##.###..####..
        ..######..##.#######
        ####.##.####...##..#
        .#####..#.######.###
        ##...#.##########...
        #.##########.#######
        .####.#.###.###.#.##
        ....##.##.###..#####
        .#.#.###########.###
        #.#.#.#####.####.###
        ###.##.####.##.#..##
        */
        [TestCase(new string[] { ".#..##.###...#######", "##.############..##.", ".#.######.########.#", ".###.#######.####.#.", "#####.##.#.##.###.##", "..#####..#.#########", "####################", "#.####....###.#.#.##", "##.#################", "#####.##.###..####..", "..######..##.#######", "####.##.####...##..#", ".#####..#.######.###", "##...#.##########...", "#.##########.#######", ".####.#.###.###.#.##", "....##.##.###..#####", ".#.#.###########.###", "#.#.#.#####.####.###", "###.##.####.##.#..##" }, 11, 13, TestName = "ComputeBestAsteroid(C 11,13)")]
        public void ComputeBestAsteroid(string[] lines, int expectedX, int expectedY)
        {
            Program.ParseMap(lines);
            var bestAsteroid = Program.ComputeBestAsteroid();
            Assert.That(bestAsteroid.Item1, Is.EqualTo(expectedX));
            Assert.That(bestAsteroid.Item2, Is.EqualTo(expectedY));
        }

        [Test]
        [TestCase(0, -5, 0, TestName = "CanonAngles(0 Deg)")]
        [TestCase(+5, 0, 90, TestName = "CanonAngles(90 Deg)")]
        [TestCase(0, +5, 180, TestName = "CanonAngles(180 Deg)")]
        [TestCase(+5, -5, 45, TestName = "CanonAngles(45 Deg)")]
        [TestCase(+5, +5, 135, TestName = "CanonAngles(135 Deg)")]
        [TestCase(-5, +5, 225, TestName = "CanonAngles(225 Deg)")]
        [TestCase(-5, 0, 270, TestName = "CanonAngles(270 Deg)")]
        public void CanonAngles(int dx, int dy, double expected)
        {
            double angle = Math.PI - Math.Atan2(dx, dy);
            Assert.That((angle * 180.0) / Math.PI, Is.EqualTo(expected));
        }

        /*
		.#....#####...#..
		##...##.#####..##
		##...#...#.#####.
		..#.....X...###..
		..#.#.....#....##
		*/
        /*
		The first nine asteroids to get vaporized, in order, would be:
		.#....###24...#..
		##...##.13#67..9#
		##...#...5.8####.
		..#.....X...###..
		..#.#.....#....##
		*/
        [TestCase(new string[] { ".#....#####...#..", "##...##.#####..##", "##...#...#.#####.", "..#.....#...###..", "..#.#.....#....##", }, 8, 3, 1, 8, 1, TestName = "SortedAsteroids(A 1)")]
        [TestCase(new string[] { ".#....##.##...#..", "##...##.#####..##", "##...#...#.#####.", "..#.....#...###..", "..#.#.....#....##", }, 8, 3, 2, 9, 0, TestName = "SortedAsteroids(A 2 J)")]
        [TestCase(new string[] { ".#....#####...#..", "##...##.#####..##", "##...#...#.#####.", "..#.....#...###..", "..#.#.....#....##", }, 8, 3, 2, 9, 0, TestName = "SortedAsteroids(A 2)")]
        [TestCase(new string[] { ".#....#####...#..", "##...##.#####..##", "##...#...#.#####.", "..#.....#...###..", "..#.#.....#....##", }, 8, 3, 3, 9, 1, TestName = "SortedAsteroids(A 3)")]
        [TestCase(new string[] { ".#....#####...#..", "##...##.#####..##", "##...#...#.#####.", "..#.....#...###..", "..#.#.....#....##", }, 8, 3, 4, 10, 0, TestName = "SortedAsteroids(A 4)")]
        [TestCase(new string[] { ".#....#####...#..", "##...##.#####..##", "##...#...#.#####.", "..#.....#...###..", "..#.#.....#....##", }, 8, 3, 5, 9, 2, TestName = "SortedAsteroids(A 5)")]
        [TestCase(new string[] { ".#....#####...#..", "##...##.#####..##", "##...#...#.#####.", "..#.....#...###..", "..#.#.....#....##", }, 8, 3, 6, 11, 1, TestName = "SortedAsteroids(A 6)")]
        [TestCase(new string[] { ".#....#####...#..", "##...##.#####..##", "##...#...#.#####.", "..#.....#...###..", "..#.#.....#....##", }, 8, 3, 7, 12, 1, TestName = "SortedAsteroids(A 7)")]
        [TestCase(new string[] { ".#....#####...#..", "##...##.#####..##", "##...#...#.#####.", "..#.....#...###..", "..#.#.....#....##", }, 8, 3, 8, 11, 2, TestName = "SortedAsteroids(A 8)")]
        [TestCase(new string[] { ".#....#####...#..", "##...##.#####..##", "##...#...#.#####.", "..#.....#...###..", "..#.#.....#....##", }, 8, 3, 9, 15, 1, TestName = "SortedAsteroids(A 9)")]
        /*
		Note that some asteroids (the ones behind the asteroids marked 1, 5, and 7) won't have a chance to be vaporized until the next full rotation. The laser continues rotating; the next nine to be vaporized are:
		.#....###.....#..
		##...##...#.....#
		##...#......1234.
		..#.....X...5##..
		..#.9.....8....76
		*/
        [TestCase(new string[] { ".#....#####...#..", "##...##.#####..##", "##...#...#.#####.", "..#.....#...###..", "..#.#.....#....##", }, 8, 3, 9 + 1, 12, 2, TestName = "SortedAsteroids(B 1)")]
        [TestCase(new string[] { ".#....#####...#..", "##...##.#####..##", "##...#...#.#####.", "..#.....#...###..", "..#.#.....#....##", }, 8, 3, 9 + 2, 13, 2, TestName = "SortedAsteroids(B 2)")]
        [TestCase(new string[] { ".#....#####...#..", "##...##.#####..##", "##...#...#.#####.", "..#.....#...###..", "..#.#.....#....##", }, 8, 3, 9 + 3, 14, 2, TestName = "SortedAsteroids(B 3)")]
        [TestCase(new string[] { ".#....#####...#..", "##...##.#####..##", "##...#...#.#####.", "..#.....#...###..", "..#.#.....#....##", }, 8, 3, 9 + 4, 15, 2, TestName = "SortedAsteroids(B 4)")]
        [TestCase(new string[] { ".#....#####...#..", "##...##.#####..##", "##...#...#.#####.", "..#.....#...###..", "..#.#.....#....##", }, 8, 3, 9 + 5, 12, 3, TestName = "SortedAsteroids(B 5)")]
        [TestCase(new string[] { ".#....#####...#..", "##...##.#####..##", "##...#...#.#####.", "..#.....#...###..", "..#.#.....#....##", }, 8, 3, 9 + 6, 16, 4, TestName = "SortedAsteroids(B 6)")]
        [TestCase(new string[] { ".#....#####...#..", "##...##.#####..##", "##...#...#.#####.", "..#.....#...###..", "..#.#.....#....##", }, 8, 3, 9 + 7, 15, 4, TestName = "SortedAsteroids(B 7)")]
        [TestCase(new string[] { ".#....#####...#..", "##...##.#####..##", "##...#...#.#####.", "..#.....#...###..", "..#.#.....#....##", }, 8, 3, 9 + 8, 10, 4, TestName = "SortedAsteroids(B 8)")]
        [TestCase(new string[] { ".#....#####...#..", "##...##.#####..##", "##...#...#.#####.", "..#.....#...###..", "..#.#.....#....##", }, 8, 3, 9 + 9, 4, 4, TestName = "SortedAsteroids(B 9)")]
        /*
		The next nine to be vaporized are then:
		.8....###.....#..
		56...9#...#.....#
		34...7...........
		..2.....X....##..
		..1..............
		*/
        [TestCase(new string[] { ".#....#####...#..", "##...##.#####..##", "##...#...#.#####.", "..#.....#...###..", "..#.#.....#....##", }, 8, 3, 18 + 1, 2, 4, TestName = "SortedAsteroids(C 1)")]
        [TestCase(new string[] { ".#....#####...#..", "##...##.#####..##", "##...#...#.#####.", "..#.....#...###..", "..#.#.....#....##", }, 8, 3, 18 + 2, 2, 3, TestName = "SortedAsteroids(C 2)")]
        [TestCase(new string[] { ".#....#####...#..", "##...##.#####..##", "##...#...#.#####.", "..#.....#...###..", "..#.#.....#....##", }, 8, 3, 18 + 3, 0, 2, TestName = "SortedAsteroids(C 3)")]
        [TestCase(new string[] { ".#....#####...#..", "##...##.#####..##", "##...#...#.#####.", "..#.....#...###..", "..#.#.....#....##", }, 8, 3, 18 + 4, 1, 2, TestName = "SortedAsteroids(C 4)")]
        [TestCase(new string[] { ".#....#####...#..", "##...##.#####..##", "##...#...#.#####.", "..#.....#...###..", "..#.#.....#....##", }, 8, 3, 18 + 5, 0, 1, TestName = "SortedAsteroids(C 5)")]
        [TestCase(new string[] { ".#....#####...#..", "##...##.#####..##", "##...#...#.#####.", "..#.....#...###..", "..#.#.....#....##", }, 8, 3, 18 + 6, 1, 1, TestName = "SortedAsteroids(C 6)")]
        [TestCase(new string[] { ".#....#####...#..", "##...##.#####..##", "##...#...#.#####.", "..#.....#...###..", "..#.#.....#....##", }, 8, 3, 18 + 7, 5, 2, TestName = "SortedAsteroids(C 7)")]
        [TestCase(new string[] { ".#....#####...#..", "##...##.#####..##", "##...#...#.#####.", "..#.....#...###..", "..#.#.....#....##", }, 8, 3, 18 + 8, 1, 0, TestName = "SortedAsteroids(C 8)")]
        [TestCase(new string[] { ".#....#####...#..", "##...##.#####..##", "##...#...#.#####.", "..#.....#...###..", "..#.#.....#....##", }, 8, 3, 18 + 9, 5, 1, TestName = "SortedAsteroids(C 9)")]
        /*
		Finally, the laser completes its first full rotation (1 through 3), a second rotation (4 through 8), and vaporizes the last asteroid (9) partway through its third rotation:
		......234.....6..
		......1...5.....7
		.................
		........X....89..
		.................
		*/
        [TestCase(new string[] { ".#....#####...#..", "##...##.#####..##", "##...#...#.#####.", "..#.....#...###..", "..#.#.....#....##", }, 8, 3, 27 + 1, 6, 1, TestName = "SortedAsteroids(D 1)")]
        [TestCase(new string[] { ".#....#####...#..", "##...##.#####..##", "##...#...#.#####.", "..#.....#...###..", "..#.#.....#....##", }, 8, 3, 27 + 2, 6, 0, TestName = "SortedAsteroids(D 2)")]
        [TestCase(new string[] { ".#....#####...#..", "##...##.#####..##", "##...#...#.#####.", "..#.....#...###..", "..#.#.....#....##", }, 8, 3, 27 + 3, 7, 0, TestName = "SortedAsteroids(D 3)")]
        [TestCase(new string[] { ".#....#####...#..", "##...##.#####..##", "##...#...#.#####.", "..#.....#...###..", "..#.#.....#....##", }, 8, 3, 27 + 4, 8, 0, TestName = "SortedAsteroids(D 4)")]
        [TestCase(new string[] { ".#....#####...#..", "##...##.#####..##", "##...#...#.#####.", "..#.....#...###..", "..#.#.....#....##", }, 8, 3, 27 + 5, 10, 1, TestName = "SortedAsteroids(D 5)")]
        [TestCase(new string[] { ".#....#####...#..", "##...##.#####..##", "##...#...#.#####.", "..#.....#...###..", "..#.#.....#....##", }, 8, 3, 27 + 6, 14, 0, TestName = "SortedAsteroids(D 6)")]
        [TestCase(new string[] { ".#....#####...#..", "##...##.#####..##", "##...#...#.#####.", "..#.....#...###..", "..#.#.....#....##", }, 8, 3, 27 + 7, 16, 1, TestName = "SortedAsteroids(D 7)")]
        [TestCase(new string[] { ".#....#####...#..", "##...##.#####..##", "##...#...#.#####.", "..#.....#...###..", "..#.#.....#....##", }, 8, 3, 27 + 8, 13, 3, TestName = "SortedAsteroids(D 8)")]
        [TestCase(new string[] { ".#....#####...#..", "##...##.#####..##", "##...#...#.#####.", "..#.....#...###..", "..#.#.....#....##", }, 8, 3, 27 + 9, 14, 3, TestName = "SortedAsteroids(D 9)")]
        /*
		In the large example above (the one with the best monitoring station location at 11,13):

		The 1st asteroid to be vaporized is at 11,12.
		The 2nd asteroid to be vaporized is at 12,1.
		The 3rd asteroid to be vaporized is at 12,2.
		The 10th asteroid to be vaporized is at 12,8.
		The 20th asteroid to be vaporized is at 16,0.
		The 50th asteroid to be vaporized is at 16,9.
		The 100th asteroid to be vaporized is at 10,16.
		The 199th asteroid to be vaporized is at 9,6.
		The 200th asteroid to be vaporized is at 8,2.
		The 201st asteroid to be vaporized is at 10,9.
		The 299th and final asteroid to be vaporized is at 11,1.
        .#..##.###...#######
        ##.############..##.
        .#.######.########.#
        .###.#######.####.#.
        #####.##.#.##.###.##
        ..#####..#.#########
        ####################
        #.####....###.#.#.##
        ##.#################
        #####.##.###..####..
        ..######..##.#######
        ####.##.####...##..#
        .#####..#.######.###
        ##...#.##########...
        #.##########.#######
        .####.#.###.###.#.##
        ....##.##.###..#####
        .#.#.###########.###
        #.#.#.#####.####.###
        ###.##.####.##.#..##
        */
        [TestCase(new string[] { ".#..##.###...#######", "##.############..##.", ".#.######.########.#", ".###.#######.####.#.", "#####.##.#.##.###.##", "..#####..#.#########", "####################", "#.####....###.#.#.##", "##.#################", "#####.##.###..####..", "..######..##.#######", "####.##.####...##..#", ".#####..#.######.###", "##...#.##########...", "#.##########.#######", ".####.#.###.###.#.##", "....##.##.###..#####", ".#.#.###########.###", "#.#.#.#####.####.###", "###.##.####.##.#..##" }, 11, 13, 1, 11, 12, TestName = "SortedAsteroid(E 1)")]
        [TestCase(new string[] { ".#..##.###...#######", "##.############..##.", ".#.######.########.#", ".###.#######.####.#.", "#####.##.#.##.###.##", "..#####..#.#########", "####################", "#.####....###.#.#.##", "##.#################", "#####.##.###..####..", "..######..##.#######", "####.##.####...##..#", ".#####..#.######.###", "##...#.##########...", "#.##########.#######", ".####.#.###.###.#.##", "....##.##.###..#####", ".#.#.###########.###", "#.#.#.#####.####.###", "###.##.####.##.#..##" }, 11, 13, 2, 12, 1, TestName = "SortedAsteroid(E 2)")]
        [TestCase(new string[] { ".#..##.###...#######", "##.############..##.", ".#.######.########.#", ".###.#######.####.#.", "#####.##.#.##.###.##", "..#####..#.#########", "####################", "#.####....###.#.#.##", "##.#################", "#####.##.###..####..", "..######..##.#######", "####.##.####...##..#", ".#####..#.######.###", "##...#.##########...", "#.##########.#######", ".####.#.###.###.#.##", "....##.##.###..#####", ".#.#.###########.###", "#.#.#.#####.####.###", "###.##.####.##.#..##" }, 11, 13, 3, 12, 2, TestName = "SortedAsteroid(E 3)")]
        [TestCase(new string[] { ".#..##.###...#######", "##.############..##.", ".#.######.########.#", ".###.#######.####.#.", "#####.##.#.##.###.##", "..#####..#.#########", "####################", "#.####....###.#.#.##", "##.#################", "#####.##.###..####..", "..######..##.#######", "####.##.####...##..#", ".#####..#.######.###", "##...#.##########...", "#.##########.#######", ".####.#.###.###.#.##", "....##.##.###..#####", ".#.#.###########.###", "#.#.#.#####.####.###", "###.##.####.##.#..##" }, 11, 13, 10, 12, 8, TestName = "SortedAsteroid(E 10)")]
        [TestCase(new string[] { ".#..##.###...#######", "##.############..##.", ".#.######.########.#", ".###.#######.####.#.", "#####.##.#.##.###.##", "..#####..#.#########", "####################", "#.####....###.#.#.##", "##.#################", "#####.##.###..####..", "..######..##.#######", "####.##.####...##..#", ".#####..#.######.###", "##...#.##########...", "#.##########.#######", ".####.#.###.###.#.##", "....##.##.###..#####", ".#.#.###########.###", "#.#.#.#####.####.###", "###.##.####.##.#..##" }, 11, 13, 20, 16, 0, TestName = "SortedAsteroid(E 20)")]
        [TestCase(new string[] { ".#..##.###...#######", "##.############..##.", ".#.######.########.#", ".###.#######.####.#.", "#####.##.#.##.###.##", "..#####..#.#########", "####################", "#.####....###.#.#.##", "##.#################", "#####.##.###..####..", "..######..##.#######", "####.##.####...##..#", ".#####..#.######.###", "##...#.##########...", "#.##########.#######", ".####.#.###.###.#.##", "....##.##.###..#####", ".#.#.###########.###", "#.#.#.#####.####.###", "###.##.####.##.#..##" }, 11, 13, 50, 16, 9, TestName = "SortedAsteroid(E 50)")]
        [TestCase(new string[] { ".#..##.###...#######", "##.############..##.", ".#.######.########.#", ".###.#######.####.#.", "#####.##.#.##.###.##", "..#####..#.#########", "####################", "#.####....###.#.#.##", "##.#################", "#####.##.###..####..", "..######..##.#######", "####.##.####...##..#", ".#####..#.######.###", "##...#.##########...", "#.##########.#######", ".####.#.###.###.#.##", "....##.##.###..#####", ".#.#.###########.###", "#.#.#.#####.####.###", "###.##.####.##.#..##" }, 11, 13, 100, 10, 16, TestName = "SortedAsteroid(E 100)")]
        [TestCase(new string[] { ".#..##.###...#######", "##.############..##.", ".#.######.########.#", ".###.#######.####.#.", "#####.##.#.##.###.##", "..#####..#.#########", "####################", "#.####....###.#.#.##", "##.#################", "#####.##.###..####..", "..######..##.#######", "####.##.####...##..#", ".#####..#.######.###", "##...#.##########...", "#.##########.#######", ".####.#.###.###.#.##", "....##.##.###..#####", ".#.#.###########.###", "#.#.#.#####.####.###", "###.##.####.##.#..##" }, 11, 13, 199, 9, 6, TestName = "SortedAsteroid(E 199)")]
        [TestCase(new string[] { ".#..##.###...#######", "##.############..##.", ".#.######.########.#", ".###.#######.####.#.", "#####.##.#.##.###.##", "..#####..#.#########", "####################", "#.####....###.#.#.##", "##.#################", "#####.##.###..####..", "..######..##.#######", "####.##.####...##..#", ".#####..#.######.###", "##...#.##########...", "#.##########.#######", ".####.#.###.###.#.##", "....##.##.###..#####", ".#.#.###########.###", "#.#.#.#####.####.###", "###.##.####.##.#..##" }, 11, 13, 200, 8, 2, TestName = "SortedAsteroid(E 200)")]
        [TestCase(new string[] { ".#..##.###...#######", "##.############..##.", ".#.######.########.#", ".###.#######.####.#.", "#####.##.#.##.###.##", "..#####..#.#########", "####################", "#.####....###.#.#.##", "##.#################", "#####.##.###..####..", "..######..##.#######", "####.##.####...##..#", ".#####..#.######.###", "##...#.##########...", "#.##########.#######", ".####.#.###.###.#.##", "....##.##.###..#####", ".#.#.###########.###", "#.#.#.#####.####.###", "###.##.####.##.#..##" }, 11, 13, 201, 10, 9, TestName = "SortedAsteroid(E 201)")]
        [TestCase(new string[] { ".#..##.###...#######", "##.############..##.", ".#.######.########.#", ".###.#######.####.#.", "#####.##.#.##.###.##", "..#####..#.#########", "####################", "#.####....###.#.#.##", "##.#################", "#####.##.###..####..", "..######..##.#######", "####.##.####...##..#", ".#####..#.######.###", "##...#.##########...", "#.##########.#######", ".####.#.###.###.#.##", "....##.##.###..#####", ".#.#.###########.###", "#.#.#.#####.####.###", "###.##.####.##.#..##" }, 11, 13, 299, 11, 1, TestName = "SortedAsteroid(E 299)")]
        public void SortedAsteroid(string[] lines, int fromX, int fromY, int index, int expectedX, int expectedY)
        {
            Program.ParseMap(lines);
            var sortedAsteroids = Program.SortAsteroidsFromPoint(fromX, fromY);
            var sa = sortedAsteroids[index - 1];
            Assert.That(sa.Item1, Is.EqualTo(expectedX));
            Assert.That(sa.Item2, Is.EqualTo(expectedY));
        }
    }
}
